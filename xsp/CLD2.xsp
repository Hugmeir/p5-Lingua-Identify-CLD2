#include <compact_lang_det.h>
#include "myinit.h"

%module{Lingua::Detect::CLD2};

%{

void
ExtDetectLanguageSummaryCheckUTF8(buffer, buffer_length, is_plain_text, cld_hints, flags)
    char *buffer;
    int buffer_length;
    bool is_plain_text;
    SV *cld_hints;
    int flags;
  PPCODE:
    CLDHints cld_hints_struct;
    hashref_to_cldhints(cld_hints, cld_hints_struct);


    Language language3 = 0;
    int percent3 = 0;
    double normalized_score3 = 0;
    ResultChunkVector resultchunkvector;
    int text_bytes = 0;
    bool is_reliable = 0;
    int valid_prefix_bytes = 0;

    Language language = 
      ExtDetectLanguageSummaryCheckUTF8(buffer, buffer_length, is_plain_text, &cld_hints_struct, flags,
                                        &language3, &percent3, &normalized_score3, &resultchunkvector,
                                        &text_bytes, &is_reliable, &valid_prefix_bytes);

    HV *hv = newHV();
    SV *rv = sv_2mortal(newRV_noinc((SV *)hv));
    hv_stores(hv, "language", newSViv(language)); // FIXME convert to string
    hv_stores(hv, "percent3", newSViv(percent3));
    hv_stores(hv, "normalized_score3", newSVnv(normalized_score3));
    // TODO resultchunkvector
    hv_stores(hv, "resultchunkvector", &PL_sv_undef);
    hv_stores(hv, "text_bytes", newSViv(text_bytes));
    hv_stores(hv, "is_reliable", newSViv((int)is_reliable));
    hv_stores(hv, "valid_prefix_bytes", newSViv(valid_prefix_bytes));
    XPUSHs(rv);
%}


%name{Lingua::Detect::CLD2::ResultChunk} struct ResultChunk
{
  %name{new} Dog(std::string& name);
  ~Dog();
};

%name{Lingua::Detect::CLD2} class Dog
{
  %name{new} Dog(std::string& name);
  ~Dog();
};


