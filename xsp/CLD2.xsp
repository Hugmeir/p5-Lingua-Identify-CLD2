#include <compact_lang_det.h>
#include "myinit.h"
#include "myconversions.h"

%module{Lingua::Identify::CLD2};
%package{Lingua::Identify::CLD2};

%{

void
DetectLanguage(buffer, is_plain_text = 1, cld_hints = &PL_sv_undef, flags = 0)
    SV *buffer
    bool is_plain_text
    SV *cld_hints
    int flags
  PPCODE:
    char *buffer_str;
    STRLEN buffer_length;
    buffer_str = SvPVutf8(buffer, buffer_length);

    CLDHints cld_hints_struct;
    hashref_to_cldhint(aTHX_ cld_hints, &cld_hints_struct);

    Language language3 = UNKNOWN_LANGUAGE;
    int percent3 = 0;
    double normalized_score3 = 0;
    ResultChunkVector resultchunkvector;
    int text_bytes = 0;
    bool is_reliable = 0;
    int valid_prefix_bytes = 0;

    Language language = 
      ExtDetectLanguageSummaryCheckUTF8(buffer_str, (int)buffer_length, is_plain_text, &cld_hints_struct, flags,
                                        &language3, &percent3, &normalized_score3, &resultchunkvector,
                                        &text_bytes, &is_reliable, &valid_prefix_bytes);

    HV *hv = newHV();
    SV *rv = sv_2mortal(newRV_noinc((SV *)hv));

    hv_stores(hv, "language", newSViv(language));

    const char *ln = CLD2::LanguageName(language);
    hv_stores(hv, "language_string", newSVpv(ln, 0));

    hv_stores(hv, "percent3", newSViv(percent3));
    hv_stores(hv, "normalized_score3", newSVnv(normalized_score3));

    AV *reschunk_av = resultchunk_vector_to_array(aTHX_ resultchunkvector);
    hv_stores(hv, "resultchunkvector", newRV_noinc((SV *)reschunk_av));

    hv_stores(hv, "text_bytes", newSViv(text_bytes));
    hv_stores(hv, "is_reliable", newSViv((int)is_reliable));
    hv_stores(hv, "valid_prefix_bytes", newSViv(valid_prefix_bytes));

    XPUSHs(rv);


char *
LanguageName(int language_id)
  ALIAS:
    LanguageName = 0
    LanguageCode = 1
    LanguageDeclaredName = 2
  CODE:
    switch (ix) {
    case 0:
      RETVAL = (char *)CLD2::LanguageName((CLD2::Language)language_id);
      break;
    case 1:
      RETVAL = (char *)CLD2::LanguageCode((CLD2::Language)language_id);
      break;
    case 2:
      RETVAL = (char *)CLD2::LanguageDeclaredName((CLD2::Language)language_id);
      break;
    default:
      abort();
    };
  OUTPUT: RETVAL

Language GetLanguageFromName(char* src)

int LanguageCloseSet(Language lang)
 
bool IsLatnLanguage(Language lang)
bool IsOthrLanguage(Language lang)

%}

